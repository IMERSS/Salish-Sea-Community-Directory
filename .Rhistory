IQ <- sites %>% filter(Location == 'Iqaluit')
PI <- sites %>% filter(Location == 'Pond Inlet')
IQ.summary <- unique(IQ)
PI.summary <- unique(PI)
summary <- rbind(IQ,PI)
library(dplyr)
setwd("/Users/andrewsimon/Sync/Simon/UBC/RAships/Nunavut RP2/Data/2022_Data/macroalgae/biomass/preliminary_analysis")
dir()
sites <- read.csv("sites.csv")
IQ <- sites %>% filter(Location == 'Iqaluit')
PI <- sites %>% filter(Location == 'Pond Inlet')
IQ.summary <- unique(IQ)
PI.summary <- unique(PI)
summary <- rbind(IQ,PI)
write.csv(summary, "sites.csv")
setwd("/Users/andrewsimon/Sync/Simon/UBC/RAships/Nunavut RP2/Data/2022_Data/macroalgae/biomass/preliminary_analysis")
dir()
sites <- read.csv("sites.csv")
IQ <- sites %>% filter(Location == 'Iqaluit')
PI <- sites %>% filter(Location == 'Pond Inlet')
IQ.summary <- unique(IQ)
PI.summary <- unique(PI)
summary <- rbind(IQ,PI)
View(summary)
write.csv(summary, "sites.csv")
dir()
sites <- read.csv("sites.csv")
algae <- read.csv("AP2_macroalgae_biomass_preliminary_analysis_2023-02-15.csv")
View(algae)
library(dplyr)
setwd("/Users/andrewsimon/Sync/Simon/UBC/RAships/Nunavut RP2/Data/2022_Data/macroalgae/biomass/preliminary_analysis")
dir()
sites <- read.csv("sites.csv")
algae <- read.csv("AP2_macroalgae_biomass_preliminary_analysis_2023-02-15.csv")
left_join(algae, sites, by =sample)
left_join(algae, sites, by == sample)
left_join(algae, sites, by = 'sample')
joined <- left_join(algae, sites, by = 'sample')
View(joined)
write.csv(joined, "temp.csv")
integrated <- read.csv("integrated_temp.csv")
View(integrated)
joined <- left_join(sites, integrated_temp, by = 'sample')
joined <- left_join(sites, integrated, by = 'sample')
integrated$sample <- as.character(integrated$sample)
joined <- left_join(sites, integrated, by = 'sample')
View(joined)
write.csv(joined, "temp.csv")
intertidal.samples <- read.csv("intertidal_samples.csv")
intertidal.samples <- read.csv("intertidal_samples.csv")
library(ecodist)
View(intertidal.samples)
setwd("/Users/andrewsimon/Sync/Simon/UBC/RAships/Nunavut RP2/Data/2022_Data/macroalgae/biomass/preliminary_analysis")
intertidal.samples <- read.csv("intertidal_samples.csv")
unique(intertidal.samples$taxon)
library(dplyr)
library(ecodist)
setwd("/Users/andrewsimon/Sync/Simon/UBC/RAships/Nunavut RP2/Data/2022_Data/macroalgae/biomass/preliminary_analysis")
intertidal.samples <- read.csv("intertidal_samples.csv")
unique(intertidal.samples$taxon)
intertidal.samples$id <- paste(location,site,transect,quadrat, sep = "-")
intertidal.samples$id <- intertidal.samples %>% paste(location,site,transect,quadrat, sep = "-")
intertidal.samples$id <- intertidal.samples %>% paste(intertidal.samples$location,intertidal.samples$site,intertidal.samples$transect,intertidal.samples$quadrat, sep = "-")
intertidal.samples$id <- paste(intertidal.samples$location,intertidal.samples$site,intertidal.samples$transect,intertidal.samples$quadrat, sep = "-")
matrix <- ecodist::crosstab(intertidal.samples$id, data$taxon, data$dry_weight_g)
matrix <- ecodist::crosstab(intertidal.samples$id, intertidal.samples$taxon, intertidal.samples$dry_weight_g)
View(matrix)
library(dplyr)
library(ecodist)
setwd("/Users/andrewsimon/Sync/Simon/UBC/RAships/Nunavut RP2/Data/2022_Data/macroalgae/biomass/preliminary_analysis")
intertidal.samples <- read.csv("intertidal_samples.csv")
intertidal.samples$id <- paste(intertidal.samples$location,intertidal.samples$site,intertidal.samples$transect,intertidal.samples$quadrat, sep = "-")
matrix <- ecodist::crosstab(intertidal.samples$id, intertidal.samples$taxon, intertidal.samples$dry_weight_g)
write.csv(matrix, "intertidal_matrix.csv")
TRUE
library(sf)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 1: Salish Sea DSM
SS_DSM <- raster("spatial_data/rasters/SS_DEM_200x200.tif")
# Convert floating point to integers
dataType(SS_DSM)="INT4S"
SS_DSM <- round(SS_DSM)
# Layer 2: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 4: Location
location <- mx_read("spatial_data/vectors/locations/Howe_Sound")
# Create raster palette
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(SS_DSM),
na.color = "transparent")
# Render leaflet map
Map <- leaflet() %>%
addTiles(options = providerTileOptions(opacity = 0.5)) %>%
addRasterImage(SS_DSM, colors =pal, opacity = 0.8, options = list(mx_baseMap = TRUE)) %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, options = list(mx_baseMap = TRUE)) %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, options = list(mx_baseMap = TRUE)) %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Howe_Sound")) %>%
print(Map)
# Layer 1: Salish Sea DSM
SS_DSM <- raster("spatial_data/rasters/SS_DEM_200x200.tif")
library(sf)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 1: Salish Sea DSM
SS_DSM <- raster("spatial_data/rasters/SS_DEM_200x200.tif")
# Convert floating point to integers
dataType(SS_DSM)="INT4S"
SS_DSM <- round(SS_DSM)
# Layer 2: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 4: Location
location <- mx_read("spatial_data/vectors/locations/Howe_Sound")
# Create raster palette
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(SS_DSM),
na.color = "transparent")
# Render leaflet map
Map <- leaflet() %>%
addTiles(options = providerTileOptions(opacity = 0.5)) %>%
addRasterImage(SS_DSM, colors = pal, opacity = 0.8) %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, options = list(mx_baseMap = TRUE)) %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, options = list(mx_baseMap = TRUE)) %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Howe_Sound")) %>%
print(Map)
remotes::install_github("rstudio/leaflet", ref="joe/feature/raster-options")
remotes::install_github("rstudio/leaflet", ref="joe/feature/raster-options")
library(sf)
library(remotes)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 1: Salish Sea DSM
SS_DSM <- raster("spatial_data/rasters/SS_DEM_200x200.tif")
# Convert floating point to integers
dataType(SS_DSM)="INT4S"
SS_DSM <- round(SS_DSM)
# Layer 2: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 4: Location
location <- mx_read("spatial_data/vectors/locations/Howe_Sound")
# Create raster palette
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(SS_DSM),
na.color = "transparent")
# Render leaflet map
Map <- leaflet() %>%
addTiles(options = providerTileOptions(opacity = 0.5)) %>%
addRasterImage(SS_DSM, colors = pal, opacity = 0.8) %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, options = list(mx_baseMap = TRUE)) %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, options = list(mx_baseMap = TRUE)) %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Howe_Sound")) %>%
print(Map)
library(sf)
library(remotes)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 1: Salish Sea DSM
SS_DSM <- raster("spatial_data/rasters/SS_DEM_200x200.tif")
# Convert floating point to integers
dataType(SS_DSM)="INT4S"
SS_DSM <- round(SS_DSM)
# Layer 2: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 4: Location
location <- mx_read("spatial_data/vectors/locations/Howe_Sound")
# Create raster palette
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(SS_DSM),
na.color = "transparent")
# Render leaflet map
Map <- leaflet() %>%
addTiles(options = providerTileOptions(opacity = 0.5), options = list(mx_baseMap = TRUE)) %>%
addRasterImage(SS_DSM, colors = pal, opacity = 0.8) %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, options = list(mx_baseMap = TRUE)) %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, options = list(mx_baseMap = TRUE)) %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Howe_Sound")) %>%
print(Map)
library(sf)
library(remotes)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 1: Salish Sea DSM
SS_DSM <- raster("spatial_data/rasters/SS_DEM_200x200.tif")
# Convert floating point to integers
dataType(SS_DSM)="INT4S"
SS_DSM <- round(SS_DSM)
# Layer 2: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 4: Location
location <- mx_read("spatial_data/vectors/locations/Howe_Sound")
# Create raster palette
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(SS_DSM),
na.color = "transparent")
# Render leaflet map
Map <- leaflet() %>%
addTiles(options = providerTileOptions(opacity = 0.5), options = list(mx_baseMap = TRUE)) %>%
addRasterImage(SS_DSM, colors = pal, opacity = 0.8, layerId = "mx_baseMap") %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, options = list(mx_baseMap = TRUE)) %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, options = list(mx_baseMap = TRUE)) %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Howe_Sound")) %>%
print(Map)
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(SS_DSM),
na.color = "transparent")
library(sf)
library(remotes)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 1: Salish Sea DSM
SS_DSM <- raster("spatial_data/rasters/SS_DEM_200x200.tif")
# Convert floating point to integers
dataType(SS_DSM)="INT4S"
SS_DSM <- round(SS_DSM)
# Layer 2: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 4: Location
location <- mx_read("spatial_data/vectors/locations/Howe_Sound")
# Create raster palette
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(SS_DSM),
na.color = "transparent")
# Render leaflet map
Map <- leaflet() %>%
addTiles(options = providerTileOptions(opacity = 0.5), options = list(mx_baseMap = TRUE)) %>%
addRasterImage(SS_DSM, colors = pal, opacity = 0.8, layerId = "mx_baseMap") %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, options = list(mx_baseMap = TRUE)) %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, options = list(mx_baseMap = TRUE)) %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Howe_Sound")) %>%
print(Map)
library(sf)
library(remotes)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 1: Salish Sea DSM
SS_DSM <- raster("spatial_data/rasters/SS_DEM_200x200.tif")
# Convert floating point to integers
dataType(SS_DSM)="INT4S"
SS_DSM <- round(SS_DSM)
# Layer 2: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 4: Location
location <- mx_read("spatial_data/vectors/locations/Howe_Sound")
# Create raster palette
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(SS_DSM),
na.color = "transparent")
# Render leaflet map
Map <- leaflet() %>%
addTiles(options = providerTileOptions(opacity = 0.5)) %>%
addRasterImage(SS_DSM, colors = pal, opacity = 0.8, layerId = "mx_baseMap") %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, options = list(mx_baseMap = TRUE)) %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, options = list(mx_baseMap = TRUE)) %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Howe_Sound")) %>%
print(Map)
library(sf)
library(remotes)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 1: Salish Sea DSM
SS_DSM <- raster("spatial_data/rasters/SS_DEM_200x200.tif")
# Convert floating point to integers
dataType(SS_DSM)="INT4S"
SS_DSM <- round(SS_DSM)
# Layer 2: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 4: Location
location <- mx_read("spatial_data/vectors/locations/Howe_Sound")
# Create raster palette
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(SS_DSM),
na.color = "transparent")
# Render leaflet map
# Note that we can't supply general options to addRasterImage because of issue https://stackoverflow.com/questions/54679054/r-leaflet-use-pane-with-addrasterimage
Map <- leaflet() %>%
addTiles(options = providerTileOptions(opacity = 0.5)) %>%
addRasterImage(SS_DSM, colors = pal, opacity = 0.8, layerId = "mx_baseMap") %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Howe_Sound")) %>%
print(Map)
library(sf)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 1: Salish Sea DSM
SS_DSM <- raster("spatial_data/rasters/SS_DEM_200x200.tif")
# Convert floating point to integers
dataType(SS_DSM)="INT4S"
SS_DSM <- round(SS_DSM)
# Layer 2: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 4: Location
location <- mx_read("spatial_data/vectors/locations/Salish_Sea")
# Create raster palette
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(SS_DSM),
na.color = "transparent")
# Render leaflet map
# Don't output raster again to avoid bloating output
Map <- leaflet() %>%
addTiles(options = providerTileOptions(opacity = 0.5)) %>%
#  addRasterImage(SS_DSM, colors = pal, opacity = 0.8) %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Salish_Sea")) %>%
print(Map)
communities <- read.csv("test.csv")
communities <- read.csv("test.csv", fileEncoding = "UTF-8")
communities <- read.csv("test.csv", header=TRUE, fileEncoding = "UTF-8")
communities <- read.csv("test.csv")
cat(communities$community[1])
cat(iconv(communities$community[1], to="UTF-8"))
cat(communities$community[1])
communities <- read.csv("test.csv", encoding = "UTF-8")
cat(communities$community[1])
communities <- read.csv("test.csv", encoding = "UTF-8")
library(sf)
library(htmlwidgets)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 1: Salish Sea DSM
SS_DSM <- raster("spatial_data/rasters/SS_DEM_200x200.tif")
# Convert floating point to integers
dataType(SS_DSM)="INT4S"
SS_DSM <- round(SS_DSM)
# Layer 2: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 4: Location
location <- mx_read("spatial_data/vectors/locations/Howe_Sound")
# Create raster palette
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(SS_DSM),
na.color = "transparent")
# Render leaflet map
# Note that we can't supply general options to addRasterImage because of issue https://stackoverflow.com/questions/54679054/r-leaflet-use-pane-with-addrasterimage
Map <- leaflet() %>%
addTiles(options = providerTileOptions(opacity = 0.5)) %>%
addRasterImage(SS_DSM, colors = pal, opacity = 0.8, layerId = "mx_baseMap") %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Howe_Sound")) %>%
print(Map)
saveWidget(Map, file="Howe_Sound.html")
library(sf)
library(htmlwidgets)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 1: Salish Sea DSM
SS_DSM <- raster("spatial_data/rasters/SS_DEM_200x200.tif")
# Convert floating point to integers
dataType(SS_DSM)="INT4S"
SS_DSM <- round(SS_DSM)
# Layer 2: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 4: Location
location <- mx_read("spatial_data/vectors/locations/Howe_Sound")
# Create raster palette
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(SS_DSM),
na.color = "transparent")
# Render leaflet map
# Note that we can't supply general options to addRasterImage because of issue https://stackoverflow.com/questions/54679054/r-leaflet-use-pane-with-addrasterimage
Map <- leaflet() %>%
addTiles(options = providerTileOptions(opacity = 0.5)) %>%
addRasterImage(SS_DSM, colors = pal, opacity = 0.8, layerId = "mx_baseMap") %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Howe_Sound")) %>%
print(Map)
saveWidget(Map, file="Howe_Sound.html")
library(sf)
library(htmlwidgets)
library(leaflet)
library(raster)
library(mapview)
source("scripts/utils.R")
# Layer 1: Salish Sea DSM
SS_DSM <- raster("spatial_data/rasters/SS_DEM_200x200.tif")
# Convert floating point to integers
dataType(SS_DSM)="INT4S"
SS_DSM <- round(SS_DSM)
# Layer 2: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 4: Location
location <- mx_read("spatial_data/vectors/locations/Howe_Sound")
# Create raster palette
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(SS_DSM),
na.color = "transparent")
# Render leaflet map
# Note that we can't supply general options to addRasterImage because of issue https://stackoverflow.com/questions/54679054/r-leaflet-use-pane-with-addrasterimage
Map <- leaflet() %>%
addTiles(options = providerTileOptions(opacity = 0.5)) %>%
addRasterImage(SS_DSM, colors = pal, opacity = 0.8, layerId = "mx_baseMap") %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Howe_Sound")) %>%
print(Map)
saveWidget(Map, file="Howe_Sound.html")
mapshot(Map, file="Howe_Sound.jpg")
library(sf)
#library(htmlwidgets)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 1: Salish Sea DSM
SS_DSM <- raster("spatial_data/rasters/SS_DEM_200x200.tif")
# Convert floating point to integers
dataType(SS_DSM)="INT4S"
SS_DSM <- round(SS_DSM)
# Layer 2: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 4: Location
location <- mx_read("spatial_data/vectors/locations/Howe_Sound")
bbox <- st_bbox(location) %>% as.vector()
# Create raster palette
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(SS_DSM),
na.color = "transparent")
# Render leaflet map
# Note that we can't supply general options to addRasterImage because of issue https://stackoverflow.com/questions/54679054/r-leaflet-use-pane-with-addrasterimage
Map <- leaflet() %>%
addTiles(options = providerTileOptions(opacity = 0.5)) %>%
addRasterImage(SS_DSM, colors = pal, opacity = 0.8, layerId = "mx_baseMap") %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Howe_Sound")) %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
# saveWidget(Map, file="Howe_Sound.html")
library(sf)
library(leaflet)
library(raster)
library(rmapshaper)
source("scripts/utils.R")
# Layer 1: Salish Sea DSM
SS_DSM <- raster("spatial_data/rasters/SS_DEM_200x200.tif")
# Convert floating point to integers
dataType(SS_DSM)="INT4S"
SS_DSM <- round(SS_DSM)
# Layer 2: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 4: Location
location <- mx_read("spatial_data/vectors/locations/Salish_Sea")
location <- rmapshaper::ms_simplify(input = as(location, 'Spatial')) %>%
st_as_sf()
bbox <- st_bbox(location) %>% as.vector()
# Create raster palette
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(SS_DSM),
na.color = "transparent")
# Render leaflet map
# Don't output raster again to avoid bloating output
Map <- leaflet() %>%
addTiles("https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}{r}.png") %>%
#  addRasterImage(SS_DSM, colors = pal, opacity = 0.8) %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Salish_Sea")) %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
cwd
pwd
getwd
getwd()
CPNWH <- read.table("E:/data/CPNWH/CPNWH_DwC/occurrence.tsv", sep="\t", header=TRUE, fileEncoding = "UTF-8", fill = TRUE)
View(CPNWH)
View(CPNWH)
CPNWH <- read.table("E:/data/CPNWH/CPNWH_DwC/occurrence.tsv", sep="\t", header=TRUE, fill = TRUE)
CPNWH50 <- read.table("E:/data/CPNWH/CPNWH_DwC/occurrence-50.tsv", sep="\t", header=TRUE, fileEncoding = "UTF-8", fill = TRUE)
View(CPNWH50)
View(CPNWH50)
CPNWH50 <- read.table("E:/data/CPNWH/CPNWH_DwC/occurrence-50.tsv", open="rb", sep="\t", header=TRUE, fileEncoding = "UTF-8", fill = TRUE)
readr.read_csv
readr::read_csv
CPNWH50 <- readr::read_csv("E:/data/CPNWH/CPNWH_DwC/occurrence-50.tsv")
problems()
CPNWH50 <- readr::read_csv("E:/data/CPNWH/CPNWH_DwC/occurrence-50.tsv", delim="\t")
CPNWH50 <- readr::read_tsv("E:/data/CPNWH/CPNWH_DwC/occurrence-50.tsv")
CPNWH <- readr::read_tsv("E:/data/CPNWH/CPNWH_DwC/occurrence.tsv")
View(CPNWH)
problems()
problems(CPNWH)
CPNWH.problems()
readr::problems()
View(CPNWH)
bryophytes <- readr::read_csv("E:\data/CPNWH-Archive/Bryophytes/CNABH_2023-02-22_DwC/occurrences.tsv")
bryophytes <- readr::read_csv("E:/data/CPNWH-Archive/Bryophytes/CNABH_2023-02-22_DwC/occurrences.tsv")
