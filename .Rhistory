source("scripts/utils.R")
# Layer 1: Salish Sea DSM
SS_DSM <- raster("spatial_data/rasters/SS_DEM_200x200.tif")
# Convert floating point to integers
dataType(SS_DSM)="INT4S"
SS_DSM <- round(SS_DSM)
# Layer 2: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 4: Location
location <- mx_read("spatial_data/vectors/locations/Howe_Sound")
# Create raster palette
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(SS_DSM),
na.color = "transparent")
# Render leaflet map
# Note that we can't supply general options to addRasterImage because of issue https://stackoverflow.com/questions/54679054/r-leaflet-use-pane-with-addrasterimage
Map <- leaflet() %>%
addTiles(options = providerTileOptions(opacity = 0.5)) %>%
addRasterImage(SS_DSM, colors = pal, opacity = 0.8, layerId = "mx_baseMap") %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Howe_Sound")) %>%
print(Map)
saveWidget(Map, file="Howe_Sound.html")
library(sf)
library(htmlwidgets)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 1: Salish Sea DSM
SS_DSM <- raster("spatial_data/rasters/SS_DEM_200x200.tif")
# Convert floating point to integers
dataType(SS_DSM)="INT4S"
SS_DSM <- round(SS_DSM)
# Layer 2: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 4: Location
location <- mx_read("spatial_data/vectors/locations/Howe_Sound")
# Create raster palette
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(SS_DSM),
na.color = "transparent")
# Render leaflet map
# Note that we can't supply general options to addRasterImage because of issue https://stackoverflow.com/questions/54679054/r-leaflet-use-pane-with-addrasterimage
Map <- leaflet() %>%
addTiles(options = providerTileOptions(opacity = 0.5)) %>%
addRasterImage(SS_DSM, colors = pal, opacity = 0.8, layerId = "mx_baseMap") %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Howe_Sound")) %>%
print(Map)
saveWidget(Map, file="Howe_Sound.html")
library(sf)
library(htmlwidgets)
library(leaflet)
library(raster)
library(mapview)
source("scripts/utils.R")
# Layer 1: Salish Sea DSM
SS_DSM <- raster("spatial_data/rasters/SS_DEM_200x200.tif")
# Convert floating point to integers
dataType(SS_DSM)="INT4S"
SS_DSM <- round(SS_DSM)
# Layer 2: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 4: Location
location <- mx_read("spatial_data/vectors/locations/Howe_Sound")
# Create raster palette
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(SS_DSM),
na.color = "transparent")
# Render leaflet map
# Note that we can't supply general options to addRasterImage because of issue https://stackoverflow.com/questions/54679054/r-leaflet-use-pane-with-addrasterimage
Map <- leaflet() %>%
addTiles(options = providerTileOptions(opacity = 0.5)) %>%
addRasterImage(SS_DSM, colors = pal, opacity = 0.8, layerId = "mx_baseMap") %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Howe_Sound")) %>%
print(Map)
saveWidget(Map, file="Howe_Sound.html")
mapshot(Map, file="Howe_Sound.jpg")
library(sf)
#library(htmlwidgets)
library(leaflet)
library(raster)
source("scripts/utils.R")
# Layer 1: Salish Sea DSM
SS_DSM <- raster("spatial_data/rasters/SS_DEM_200x200.tif")
# Convert floating point to integers
dataType(SS_DSM)="INT4S"
SS_DSM <- round(SS_DSM)
# Layer 2: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 4: Location
location <- mx_read("spatial_data/vectors/locations/Howe_Sound")
bbox <- st_bbox(location) %>% as.vector()
# Create raster palette
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(SS_DSM),
na.color = "transparent")
# Render leaflet map
# Note that we can't supply general options to addRasterImage because of issue https://stackoverflow.com/questions/54679054/r-leaflet-use-pane-with-addrasterimage
Map <- leaflet() %>%
addTiles(options = providerTileOptions(opacity = 0.5)) %>%
addRasterImage(SS_DSM, colors = pal, opacity = 0.8, layerId = "mx_baseMap") %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Howe_Sound")) %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
# saveWidget(Map, file="Howe_Sound.html")
library(sf)
library(leaflet)
library(raster)
library(rmapshaper)
source("scripts/utils.R")
# Layer 1: Salish Sea DSM
SS_DSM <- raster("spatial_data/rasters/SS_DEM_200x200.tif")
# Convert floating point to integers
dataType(SS_DSM)="INT4S"
SS_DSM <- round(SS_DSM)
# Layer 2: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 3: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 4: Location
location <- mx_read("spatial_data/vectors/locations/Salish_Sea")
location <- rmapshaper::ms_simplify(input = as(location, 'Spatial')) %>%
st_as_sf()
bbox <- st_bbox(location) %>% as.vector()
# Create raster palette
pal <- colorNumeric(c("#0C2C84", "#41B6C4", "#FFFFCC"), values(SS_DSM),
na.color = "transparent")
# Render leaflet map
# Don't output raster again to avoid bloating output
Map <- leaflet() %>%
addTiles("https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}{r}.png") %>%
#  addRasterImage(SS_DSM, colors = pal, opacity = 0.8) %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Salish_Sea")) %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
cwd
pwd
getwd
getwd()
CPNWH <- read.table("E:/data/CPNWH/CPNWH_DwC/occurrence.tsv", sep="\t", header=TRUE, fileEncoding = "UTF-8", fill = TRUE)
View(CPNWH)
View(CPNWH)
CPNWH <- read.table("E:/data/CPNWH/CPNWH_DwC/occurrence.tsv", sep="\t", header=TRUE, fill = TRUE)
CPNWH50 <- read.table("E:/data/CPNWH/CPNWH_DwC/occurrence-50.tsv", sep="\t", header=TRUE, fileEncoding = "UTF-8", fill = TRUE)
View(CPNWH50)
View(CPNWH50)
CPNWH50 <- read.table("E:/data/CPNWH/CPNWH_DwC/occurrence-50.tsv", open="rb", sep="\t", header=TRUE, fileEncoding = "UTF-8", fill = TRUE)
readr.read_csv
readr::read_csv
CPNWH50 <- readr::read_csv("E:/data/CPNWH/CPNWH_DwC/occurrence-50.tsv")
problems()
CPNWH50 <- readr::read_csv("E:/data/CPNWH/CPNWH_DwC/occurrence-50.tsv", delim="\t")
CPNWH50 <- readr::read_tsv("E:/data/CPNWH/CPNWH_DwC/occurrence-50.tsv")
CPNWH <- readr::read_tsv("E:/data/CPNWH/CPNWH_DwC/occurrence.tsv")
View(CPNWH)
problems()
problems(CPNWH)
CPNWH.problems()
readr::problems()
View(CPNWH)
bryophytes <- readr::read_csv("E:\data/CPNWH-Archive/Bryophytes/CNABH_2023-02-22_DwC/occurrences.tsv")
bryophytes <- readr::read_csv("E:/data/CPNWH-Archive/Bryophytes/CNABH_2023-02-22_DwC/occurrences.tsv")
library(sf)
library(leaflet)
library(raster)
library(rmapshaper)
install.packages("rmapshaper")
library(sf)
library(leaflet)
library(raster)
library(rmapshaper)
source("scripts/utils.R")
# Layer 1: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 2: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 3: Location
location <- mx_read("spatial_data/vectors/locations/Salish_Sea")
location <- rmapshaper::ms_simplify(input = as(location, 'Spatial')) %>%
st_as_sf()
bbox <- st_bbox(location) %>% as.vector()
# Render leaflet map
Map <- leaflet() %>%
addTiles("https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}{r}.png") %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Salish_Sea")) %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
writeOGR(location, "locations/Salish_Sea", "Salish_Sea",
driver = "ESRI Shapefile")
library(rgdal)
install.packages("rgdal")
library(rgdal)
writeOGR(location, "locations/Salish_Sea", "Salish_Sea",
driver = "ESRI Shapefile")
st_write(location, layer = "/spatial_data/vectors/locations/
st_write(location, layer = "/spatial_data/vectors/locations/Salish_Sea.shp", driver = "ESRI Shapefile")
st_write(location, layer = "spatial_data/vectors/locations/Salish_Sea.shp", driver = "ESRI Shapefile")
st_write(location, dsn = "spatial_data/vectors/locations/Salish_Sea.shp", layer = "spatial_data/vectors/locations/Salish_Sea.shp", driver = "ESRI Shapefile")
st_write(location, dsn = "Salish_Sea.shp", layer = "spatial_data/vectors/locations/Salish_Sea.shp", driver = "ESRI Shapefile")
st_write(location, dsn = "Salish_Sea.shp", layer = "spatial_data/vectors/locations/Salish_Sea.shp", driver = "ESRI Shapefile")
st_write(location, dsn = "Salish_Sea.shp", layer = "spatial_data/vectors/locations/Salish_Sea/Salish_Sea.shp", driver = "ESRI Shapefile")
library(sf)
library(leaflet)
library(raster)
library(rmapshaper)
source("scripts/utils.R")
# Layer 1: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 2: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 3: Location
location <- mx_read("spatial_data/vectors/locations/Salish_Sea")
bbox <- st_bbox(location) %>% as.vector()
# Render leaflet map
Map <- leaflet() %>%
addTiles("https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}{r}.png") %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Salish_Sea")) %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
library(sf)
library(leaflet)
library(raster)
library(rmapshaper)
source("scripts/utils.R")
# Layer 1: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 2: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 3: Location
location <- mx_read("spatial_data/vectors/locations/Howe_Sound")
location <- rmapshaper::ms_simplify(input = as(location, 'Spatial')) %>%
st_as_sf()
bbox <- st_bbox(location) %>% as.vector()
# Render leaflet map
# Note that we can't supply general options to addRasterImage because of issue https://stackoverflow.com/questions/54679054/r-leaflet-use-pane-with-addrasterimage
Map <- leaflet() %>%
addTiles("https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}{r}.png") %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Howe_Sound")) %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
# saveWidget(Map, file="Howe_Sound.html")
st_write(location, dsn = "Howe_Sound.shp", layer = "spatial_data/vectors/locations/Howe_Sound/Howe_Sound.shp", driver = "ESRI Shapefile")
st_write(location, dsn = "Howe_Sound.shp", layer = "spatial_data/vectors/locations/Howe_Sound/Howe_Sound.shp", driver = "ESRI Shapefile")
st_write(location, dsn = "Howe_Sound.shp", layer = "spatial_data/vectors/locations/Howe_Sound/Howe_Sound", driver = "ESRI Shapefile")
st_write(location, dsn = "Howe_Sound.shp", layer = "spatial_data/vectors/locations/Howe_Sound/Howe_Sound.shp
st_write(location, dsn = "Howe_Sound.shp", layer = "spatial_data/vectors/locations/Howe_Sound/Howe_Sound.shp", driver = "ESRI Shapefile")
st_write(location, dsn = "Howe_Sound.shp", layer = "Howe_Sound.shp", driver = "ESRI Shapefile")
library(sf)
library(leaflet)
library(raster)
library(rmapshaper)
source("scripts/utils.R")
# Layer 1: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 2: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 3: Location
location <- mx_read("spatial_data/vectors/locations/Howe_Sound")
# Set bounding box
bbox <- st_bbox(location) %>% as.vector()
# Render leaflet map
# Note that we can't supply general options to addRasterImage because of issue https://stackoverflow.com/questions/54679054/r-leaflet-use-pane-with-addrasterimage
Map <- leaflet() %>%
addTiles("https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}{r}.png") %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Howe_Sound")) %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
# saveWidget(Map, file="Howe_Sound.html")
# Script for simplifying Shapes for Salish Sea Community Atlas data visualization
# Note: careful not to rerun this script over the same polygon as it may degrade polygon geometry
# Load libraries
library(sf)
library(rmapshaper)
# Load dependencies
source("scripts/utils.R")
# Read original shape
location <- mx_read("spatial_data/vectors/locations/GINPR")
# Simplify shape
location <- rmapshaper::ms_simplify(input = as(location, 'Spatial')) %>%
st_as_sf()
# Write shape
st_write(location, dsn = "GINPR.shp", layer = "spatial_data/vectors/locations/GINPR/GINPR.shp", driver = "ESRI Shapefile")
# Script for simplifying Shapes for Salish Sea Community Atlas data visualization
# Note: careful not to rerun this script over the same polygon as it may degrade polygon geometry
# Load libraries
library(sf)
library(rmapshaper)
# Load dependencies
source("scripts/utils.R")
# Read original shape
location <- mx_read("spatial_data/vectors/locations/SGI")
# Simplify shape
location <- rmapshaper::ms_simplify(input = as(location, 'Spatial')) %>%
st_as_sf()
# Export simplified shape
# Note: cannot set path for writing new layer; by default writes to root directory
st_write(location, dsn = "SGI.shp", layer = "SGI.shp", driver = "ESRI Shapefile")
# Script for simplifying Shapes for Salish Sea Community Atlas data visualization
# Note: careful not to rerun this script over the same polygon as it may degrade polygon geometry
# Load libraries
library(sf)
library(rmapshaper)
# Load dependencies
source("scripts/utils.R")
# Read original shape
location <- mx_read("spatial_data/vectors/locations/Galiano_Island")
# Simplify shape
location <- rmapshaper::ms_simplify(input = as(location, 'Spatial')) %>%
st_as_sf()
# Export simplified shape
# Note: cannot set path for writing new layer; by default writes to root directory
st_write(location, dsn = "Galiano_Island.shp", layer = "Galiano_Island.shp", driver = "ESRI Shapefile")
library(sf)
library(leaflet)
library(raster)
library(rmapshaper)
source("scripts/utils.R")
# Layer 1: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 2: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 3: Location
location <- mx_read("spatial_data/vectors/locations/SGI")
# Set bounding box
bbox <- st_bbox(location) %>% as.vector()
# Render leaflet map
Map <- leaflet() %>%
addTiles("https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}{r}.png") %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Howe_Sound")) %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
# Layer 2: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
library(sf)
library(leaflet)
library(raster)
library(rmapshaper)
source("scripts/utils.R")
# Layer 1: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 2: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 3: Location
location <- mx_read("spatial_data/vectors/locations/SGI")
# Set bounding box
bbox <- st_bbox(location) %>% as.vector()
# Render leaflet map
Map <- leaflet() %>%
addTiles("https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}{r}.png") %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Howe_Sound")) %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
library(sf)
library(leaflet)
library(raster)
library(rmapshaper)
source("scripts/utils.R")
# Layer 1: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 2: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 3: Location
location <- mx_read("spatial_data/vectors/locations/Galiano_Island")
# Set bounding box
bbox <- st_bbox(location) %>% as.vector()
# Render leaflet map
Map <- leaflet() %>%
addTiles("https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}{r}.png") %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Howe_Sound")) %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
library(sf)
library(leaflet)
library(raster)
library(rmapshaper)
source("scripts/utils.R")
# Layer 1: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 2: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 3: Location
location <- mx_read("spatial_data/vectors/locations/GINPR")
# Set bounding box
bbox <- st_bbox(location) %>% as.vector()
# Render leaflet map
Map <- leaflet() %>%
addTiles("https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}{r}.png") %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Howe_Sound")) %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
library(sf)
library(leaflet)
library(raster)
library(rmapshaper)
source("scripts/utils.R")
# Layer 1: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 2: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 3: Location
location <- mx_read("spatial_data/vectors/locations/Salish_Sea")
# Set bounding box
bbox <- st_bbox(location) %>% as.vector()
# Render leaflet map
Map <- leaflet() %>%
addTiles("https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}{r}.png") %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Salish_Sea")) %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
# Script for simplifying Shapes for Salish Sea Community Atlas data visualization
# Note: careful not to rerun this script over the same polygon as it may degrade polygon geometry
# Load libraries
library(sf)
library(rmapshaper)
# Load dependencies
source("scripts/utils.R")
# Read original shape
location <- mx_read("spatial_data/vectors/locations/Puget_Sound")
# Simplify shape
location <- rmapshaper::ms_simplify(input = as(location, 'Spatial')) %>%
st_as_sf()
# Export simplified shape
# Note: cannot set path for writing new layer; by default writes to root directory
st_write(location, dsn = "Galiano_Island.shp", layer = "Puget_Sound.shp", driver = "ESRI Shapefile")
library(sf)
library(leaflet)
library(raster)
library(rmapshaper)
source("scripts/utils.R")
# Layer 1: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 2: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 3: Location
location <- mx_read("spatial_data/vectors/locations/Puget_Sound")
# Set bounding box
bbox <- st_bbox(location) %>% as.vector()
# Render leaflet map
Map <- leaflet() %>%
addTiles("https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}{r}.png") %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Salish_Sea")) %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
# Script for simplifying Shapes for Salish Sea Community Atlas data visualization
# Note: careful not to rerun this script over the same polygon as it may degrade polygon geometry
# Load libraries
library(sf)
library(rmapshaper)
# Load dependencies
source("scripts/utils.R")
# Read original shape
location <- mx_read("spatial_data/vectors/locations/Georgia_Strait")
# Simplify shape
location <- rmapshaper::ms_simplify(input = as(location, 'Spatial')) %>%
st_as_sf()
# Export simplified shape
# Note: cannot set path for writing new layer; by default writes to root directory
st_write(location, dsn = "Georgia_Strait.shp", layer = "Georgia_Strait.shp", driver = "ESRI Shapefile")
library(sf)
library(leaflet)
library(raster)
library(rmapshaper)
source("scripts/utils.R")
# Layer 1: Salish Sea Region
boundary <- mx_read("spatial_data/vectors/boundary")
# Layer 2: Salish Sea Islands and Mainland
islands <- mx_read("spatial_data/vectors/islands")
# Layer 3: Location
location <- mx_read("spatial_data/vectors/locations/Georgia_Strait")
# Set bounding box
bbox <- st_bbox(location) %>% as.vector()
# Render leaflet map
Map <- leaflet() %>%
addTiles("https://{s}.basemaps.cartocdn.com/dark_nolabels/{z}/{x}/{y}{r}.png") %>%
addPolygons(data = boundary, color = "blue", weight = 2, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = islands, color = "blue", weight = 1, fillOpacity = 0, layerId = "mx_baseMap") %>%
addPolygons(data = location, color = "yellow", weight = 2, fillOpacity = 0, options = list(mx_locationId = "Salish_Sea")) %>%
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])
print(Map)
