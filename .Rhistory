nrow(Lomer.2022.Gossip.Is.names.matched)+nrow(Lomer.2022.Gossip.Is.names.unmatched)
# Read key to reconcile mismatches based on previous keys modified with the inclusion of new reports to summary
Lomer.2022.Gossip.Is.key <- read.csv("keys/vascular_plant_taxon_key_2022.csv")
# Swap unmatched names using key
Lomer.2022.Gossip.Is.names.unmatched.matched <- Lomer.2022.Gossip.Is.names.unmatched
Lomer.2022.Gossip.Is.names.unmatched.matched$scientificNameTemp <- Lomer.2022.Gossip.Is.key$Matched.Taxon[match(unlist(Lomer.2022.Gossip.Is.names.unmatched.matched$scientificName), Lomer.2022.Gossip.Is.key$Taxon)]
# Add values based on newly matched name
Lomer.2022.Gossip.Is.names.unmatched.matched$scientificNameAuthorship <- summary$Taxon.Author[match(unlist(Lomer.2022.Gossip.Is.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Lomer.2022.Gossip.Is.names.unmatched.matched$taxonID <- summary$ID[match(unlist(Lomer.2022.Gossip.Is.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Lomer.2022.Gossip.Is.names.unmatched.matched$kingdom <- summary$Kingdom[match(unlist(Lomer.2022.Gossip.Is.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Lomer.2022.Gossip.Is.names.unmatched.matched$phylum <- summary$Phylum[match(unlist(Lomer.2022.Gossip.Is.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Lomer.2022.Gossip.Is.names.unmatched.matched$class <- summary$Class[match(unlist(Lomer.2022.Gossip.Is.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Lomer.2022.Gossip.Is.names.unmatched.matched$order <- summary$Order[match(unlist(Lomer.2022.Gossip.Is.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Lomer.2022.Gossip.Is.names.unmatched.matched$suborder <- summary$Suborder[match(unlist(Lomer.2022.Gossip.Is.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Lomer.2022.Gossip.Is.names.unmatched.matched$superfamily <- summary$Superfamily[match(unlist(Lomer.2022.Gossip.Is.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Lomer.2022.Gossip.Is.names.unmatched.matched$family <- summary$Family[match(unlist(Lomer.2022.Gossip.Is.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Lomer.2022.Gossip.Is.names.unmatched.matched$genus <- summary$Genus[match(unlist(Lomer.2022.Gossip.Is.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Lomer.2022.Gossip.Is.names.unmatched.matched$specificEpithet <- summary$Species[match(unlist(Lomer.2022.Gossip.Is.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Lomer.2022.Gossip.Is.names.unmatched.matched$hybrid <- summary$Hybrid[match(unlist(Lomer.2022.Gossip.Is.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Lomer.2022.Gossip.Is.names.unmatched.matched$subspecies <- summary$Subspecies[match(unlist(Lomer.2022.Gossip.Is.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Lomer.2022.Gossip.Is.names.unmatched.matched$variety <- summary$Variety[match(unlist(Lomer.2022.Gossip.Is.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Lomer.2022.Gossip.Is.names.unmatched.matched$establishmentMeans <- summary$Origin[match(unlist(Lomer.2022.Gossip.Is.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Lomer.2022.Gossip.Is.names.unmatched.matched$provincialStatus <- summary$Provincial.Status[match(unlist(Lomer.2022.Gossip.Is.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Lomer.2022.Gossip.Is.names.unmatched.matched$nationalStatus <- summary$National.Status[match(unlist(Lomer.2022.Gossip.Is.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
# Filter taxa unrecognized in summary
Lomer.2022.Gossip.Is.names.unmatched.unmatched <- Lomer.2022.Gossip.Is.names.unmatched.matched[is.na(Lomer.2022.Gossip.Is.names.unmatched.matched$taxonID),]
Lomer.2022.Gossip.Is.names.unmatched.unmatched$scientificNameTemp <- NULL
# Filter taxa recognized in summary
Lomer.2022.Gossip.Is.names.unmatched.matched$scientificName <- Lomer.2022.Gossip.Is.names.unmatched.matched$scientificNameTemp
Lomer.2022.Gossip.Is.names.unmatched.matched$scientificNameTemp <- NULL
Lomer.2022.Gossip.Is.names.unmatched.matched <- Lomer.2022.Gossip.Is.names.unmatched.matched %>% drop_na(taxonID)
# Confirm all records are represented
nrow(Lomer.2022.Gossip.Is)
nrow(Lomer.2022.Gossip.Is.names.matched)
nrow(Lomer.2022.Gossip.Is.names.unmatched)
nrow(Lomer.2022.Gossip.Is.names.unmatched.matched)
nrow(Lomer.2022.Gossip.Is.names.unmatched.unmatched)
nrow(Lomer.2022.Gossip.Is.names.matched)+nrow(Lomer.2022.Gossip.Is.names.unmatched.matched)+nrow(Lomer.2022.Gossip.Is.names.unmatched.unmatched)
# Bind records
Lomer.2022.Gossip.Is.records <- rbind(Lomer.2022.Gossip.Is.names.matched,Lomer.2022.Gossip.Is.names.unmatched.matched)
# Set date formatting consistent with other data frames
Lomer.2022.Gossip.Is.records$eventDate <- as.Date(Lomer.2022.Gossip.Is.records$eventDate)
# Compare records in and out
nrow(Lomer.2022.Gossip.Is)
nrow(Lomer.2022.Gossip.Is.records)
# Add to record of unmatched names
ncol(unmatched.vascular.plant.records)
ncol(Lomer.2022.Gossip.Is.names.unmatched.unmatched)
unmatched.vascular.plant.records <- rbind(unmatched.vascular.plant.records,Lomer.2022.Gossip.Is.names.unmatched.unmatched)
unmatched.vascular.plant.records
# Read RBCM Records
# Note: see email from Bill Crins re: locality information
RBCM.georeferencing.corrected <- read.csv("digitized/DarwinCore/RBCM_vascular_plant_records_georeferencing_corrected_2021-12-05_DwC.csv") # Note: georeferencing still needs to be reviewed; at least one obs incorrectly mapped on Mount Galiano
# Generate Taxon field to facilitate join
RBCM.georeferencing.corrected$scientificName <- paste(RBCM.georeferencing.corrected$genus,RBCM.georeferencing.corrected$speciesEpithet)
# Create DarwinCore dataframe template
data.frame <- as.data.frame(matrix(ncol = length(DwCFields), nrow = nrow(RBCM.georeferencing.corrected)))
names(data.frame) <- DwCFields
data.frame[names(RBCM.georeferencing.corrected)] <- RBCM.georeferencing.corrected
RBCM.georeferencing.corrected <- select(data.frame, c(1:length(DwCFields)))
# Add metadata
RBCM.georeferencing.corrected$stateProvince <- "British Columbia"
RBCM.georeferencing.corrected$island <- "Galiano Island"
RBCM.georeferencing.corrected$country <- "Canada"
RBCM.georeferencing.corrected$countryCode <- "CA"
RBCM.georeferencing.corrected$institutionCode <- "V"
RBCM.georeferencing.corrected$coordinateUncertaintyInMeters <- 50
RBCM.georeferencing.corrected$georeferenceProtocol <- "Coordinates generalized based on mapped locality information"
RBCM.georeferencing.corrected$georeferenceVerificationStatus <- "verified by data custodian"
RBCM.georeferencing.corrected$basisOfRecord <- "PreservedSpecimen"
# Merge with summary to standardize names and taxon metadata
RBCM.georeferencing.corrected$scientificNameAuthorship <- summary$Taxon.Author[match(unlist(RBCM.georeferencing.corrected$scientificName), summary$Taxon)]
RBCM.georeferencing.corrected$taxonID <- summary$ID[match(unlist(RBCM.georeferencing.corrected$scientificName), summary$Taxon)]
RBCM.georeferencing.corrected$kingdom <- summary$Kingdom[match(unlist(RBCM.georeferencing.corrected$scientificName), summary$Taxon)]
RBCM.georeferencing.corrected$phylum <- summary$Phylum[match(unlist(RBCM.georeferencing.corrected$scientificName), summary$Taxon)]
RBCM.georeferencing.corrected$class <- summary$Class[match(unlist(RBCM.georeferencing.corrected$scientificName), summary$Taxon)]
RBCM.georeferencing.corrected$order <- summary$Order[match(unlist(RBCM.georeferencing.corrected$scientificName), summary$Taxon)]
RBCM.georeferencing.corrected$suborder <- summary$Suborder[match(unlist(RBCM.georeferencing.corrected$scientificName), summary$Taxon)]
RBCM.georeferencing.corrected$superfamily <- summary$Superfamily[match(unlist(RBCM.georeferencing.corrected$scientificName), summary$Taxon)]
RBCM.georeferencing.corrected$family <- summary$Family[match(unlist(RBCM.georeferencing.corrected$scientificName), summary$Taxon)]
RBCM.georeferencing.corrected$genus <- summary$Genus[match(unlist(RBCM.georeferencing.corrected$scientificName), summary$Taxon)]
RBCM.georeferencing.corrected$specificEpithet <- summary$Species[match(unlist(RBCM.georeferencing.corrected$scientificName), summary$Taxon)]
RBCM.georeferencing.corrected$hybrid <- summary$Hybrid[match(unlist(RBCM.georeferencing.corrected$scientificName), summary$Taxon)]
RBCM.georeferencing.corrected$subspecies <- summary$Subspecies[match(unlist(RBCM.georeferencing.corrected$scientificName), summary$Taxon)]
RBCM.georeferencing.corrected$variety <- summary$Variety[match(unlist(RBCM.georeferencing.corrected$scientificName), summary$Taxon)]
RBCM.georeferencing.corrected$establishmentMeans <- summary$Origin[match(unlist(RBCM.georeferencing.corrected$scientificName), summary$Taxon)]
RBCM.georeferencing.corrected$provincialStatus <- summary$Provincial.Status[match(unlist(RBCM.georeferencing.corrected$scientificName), summary$Taxon)]
RBCM.georeferencing.corrected$nationalStatus <- summary$National.Status[match(unlist(RBCM.georeferencing.corrected$scientificName), summary$Taxon)]
# Unmatched records
RBCM.georeferencing.corrected.names.unmatched <- RBCM.georeferencing.corrected[is.na(RBCM.georeferencing.corrected$taxonID),]
# Matched records
RBCM.georeferencing.corrected.names.matched <- anti_join(RBCM.georeferencing.corrected,RBCM.georeferencing.corrected.names.unmatched)
# Confirm all records are represented
nrow(RBCM.georeferencing.corrected)
nrow(RBCM.georeferencing.corrected.names.matched)
nrow(RBCM.georeferencing.corrected.names.unmatched)
nrow(RBCM.georeferencing.corrected.names.matched)+nrow(RBCM.georeferencing.corrected.names.unmatched)
# Read key to reconcile mismatches based on previous keys modified with the inclusion of new reports to summary
RBCM.georeferencing.corrected.key <- read.csv("keys/vascular_plant_taxon_key_2022.csv")
# Swap unmatched names using key
RBCM.georeferencing.corrected.names.unmatched.matched <- RBCM.georeferencing.corrected.names.unmatched
RBCM.georeferencing.corrected.names.unmatched.matched$scientificNameTemp <- RBCM.georeferencing.corrected.key$Matched.Taxon[match(unlist(RBCM.georeferencing.corrected.names.unmatched.matched$scientificName), RBCM.georeferencing.corrected.key$Taxon)]
# Add values based on newly matched name
RBCM.georeferencing.corrected.names.unmatched.matched$scientificNameAuthorship <- summary$Taxon.Author[match(unlist(RBCM.georeferencing.corrected.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
RBCM.georeferencing.corrected.names.unmatched.matched$taxonID <- summary$ID[match(unlist(RBCM.georeferencing.corrected.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
RBCM.georeferencing.corrected.names.unmatched.matched$kingdom <- summary$Kingdom[match(unlist(RBCM.georeferencing.corrected.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
RBCM.georeferencing.corrected.names.unmatched.matched$phylum <- summary$Phylum[match(unlist(RBCM.georeferencing.corrected.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
RBCM.georeferencing.corrected.names.unmatched.matched$class <- summary$Class[match(unlist(RBCM.georeferencing.corrected.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
RBCM.georeferencing.corrected.names.unmatched.matched$order <- summary$Order[match(unlist(RBCM.georeferencing.corrected.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
RBCM.georeferencing.corrected.names.unmatched.matched$suborder <- summary$Suborder[match(unlist(RBCM.georeferencing.corrected.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
RBCM.georeferencing.corrected.names.unmatched.matched$superfamily <- summary$Superfamily[match(unlist(RBCM.georeferencing.corrected.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
RBCM.georeferencing.corrected.names.unmatched.matched$family <- summary$Family[match(unlist(RBCM.georeferencing.corrected.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
RBCM.georeferencing.corrected.names.unmatched.matched$genus <- summary$Genus[match(unlist(RBCM.georeferencing.corrected.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
RBCM.georeferencing.corrected.names.unmatched.matched$specificEpithet <- summary$Species[match(unlist(RBCM.georeferencing.corrected.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
RBCM.georeferencing.corrected.names.unmatched.matched$hybrid <- summary$Hybrid[match(unlist(RBCM.georeferencing.corrected.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
RBCM.georeferencing.corrected.names.unmatched.matched$subspecies <- summary$Subspecies[match(unlist(RBCM.georeferencing.corrected.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
RBCM.georeferencing.corrected.names.unmatched.matched$variety <- summary$Variety[match(unlist(RBCM.georeferencing.corrected.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
RBCM.georeferencing.corrected.names.unmatched.matched$establishmentMeans <- summary$Origin[match(unlist(RBCM.georeferencing.corrected.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
RBCM.georeferencing.corrected.names.unmatched.matched$provincialStatus <- summary$Provincial.Status[match(unlist(RBCM.georeferencing.corrected.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
RBCM.georeferencing.corrected.names.unmatched.matched$nationalStatus <- summary$National.Status[match(unlist(RBCM.georeferencing.corrected.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
# Filter taxa unrecognized in summary
RBCM.georeferencing.corrected.names.unmatched.unmatched <- RBCM.georeferencing.corrected.names.unmatched.matched[is.na(RBCM.georeferencing.corrected.names.unmatched.matched$taxonID),]
RBCM.georeferencing.corrected.names.unmatched.unmatched$scientificNameTemp <- NULL
# Filter taxa recognized in summary
RBCM.georeferencing.corrected.names.unmatched.matched$scientificName <- RBCM.georeferencing.corrected.names.unmatched.matched$scientificNameTemp
RBCM.georeferencing.corrected.names.unmatched.matched$scientificNameTemp <- NULL
RBCM.georeferencing.corrected.names.unmatched.matched <- RBCM.georeferencing.corrected.names.unmatched.matched %>% drop_na(taxonID)
# Confirm all records are represented
nrow(RBCM.georeferencing.corrected)
nrow(RBCM.georeferencing.corrected.names.matched)
nrow(RBCM.georeferencing.corrected.names.unmatched)
nrow(RBCM.georeferencing.corrected.names.unmatched.matched)
nrow(RBCM.georeferencing.corrected.names.unmatched.unmatched)
nrow(RBCM.georeferencing.corrected.names.matched)+nrow(RBCM.georeferencing.corrected.names.unmatched.matched)+nrow(RBCM.georeferencing.corrected.names.unmatched.unmatched)
# Bind records
RBCM.records <- rbind(RBCM.georeferencing.corrected.names.matched,RBCM.georeferencing.corrected.names.unmatched.matched)
# Set date formatting consistent with other data frames
RBCM.records$eventDate <- as.Date(RBCM.records$eventDate)
# Compare records in and out
nrow(RBCM.georeferencing.corrected)
nrow(RBCM.records)# 5 records discarded
# discarded records include those that cannot be reconciled with summary due to lack of infrataxonic specificity
# Note: it should be possible to match Phragmites australis with a refresh of RBCM data
# Add to record of unmatched names
ncol(unmatched.vascular.plant.records)
ncol(RBCM.georeferencing.corrected.names.unmatched.unmatched)
unmatched.vascular.plant.records <- rbind(unmatched.vascular.plant.records,RBCM.georeferencing.corrected.names.unmatched.unmatched)
unmatched.vascular.plant.records
# Read Hans Roemer - 2004 - Mt. Sutil Records
Roemer.2004.Mt.Sutil.plot.metadata <- read.csv("digitized/DarwinCore/Roemer_2004_Mt_Sutil_plot_metadata_DwC.csv") # Note: georeferencing still needs to be reviewed; at least one obs incorrectly mapped on Mount Galiano
Roemer.2004.Mt.Sutil.vegetation <- read.csv("digitized/DarwinCore/Roemer_2004_Mt_Sutil_vegetation_DwC.csv") # Note: georeferencing still needs to be reviewed; at least one obs incorrectly mapped on Mount Galiano
# Remove non-vasculars from vegetation dataframe
Roemer.2004.Mt.Sutil.vegetation <- subset(Roemer.2004.Mt.Sutil.vegetation, layer != "moss/lichen")
# Compile records with plot metadata
Roemer.2004 <- left_join(Roemer.2004.Mt.Sutil.vegetation, Roemer.2004.Mt.Sutil.plot.metadata)
# Create unique identifiers for observations
unique.prefix <- "ROEMER2004:"
unique.suffix <- 1:nrow(Roemer.2004)
# Create DarwinCore dataframe template
data.frame <- as.data.frame(matrix(ncol = length(DwCFields), nrow = nrow(Roemer.2004)))
names(data.frame) <- DwCFields
data.frame[names(Roemer.2004)] <- Roemer.2004
Roemer.2004 <- select(data.frame, c(1:length(DwCFields)))
# Add metadata
Roemer.2004$associatedReferences <- "Roemer H (2004) Perennial Grass Communities on Mount Sutil. Unpublished species list."
Roemer.2004$bibliographicCitation <- "Roemer H (2004) Perennial Grass Communities on Mount Sutil. Unpublished species list."
Roemer.2004$datasetName <- "Perennial Grass Communities on Mount Sutil"
Roemer.2004$catalogNumber <- paste(unique.prefix,unique.suffix, sep = "")
Roemer.2004$recordedBy <- "Hans Roemer"
Roemer.2004$eventDate <- '2004-07-01'
Roemer.2004$coordinateUncertaintyInMeters <- 3 # Need to ask Hans how good his GPS was...
Roemer.2004$georeferenceProtocol <- "Coordinates mapped by GPS"
Roemer.2004$georeferenceVerificationStatus <- "verified by data custodian"
Roemer.2004$stateProvince <- "British Columbia"
Roemer.2004$locality <- "Mount Sutil"
Roemer.2004$island <- "Galiano Island"
Roemer.2004$country <- "Canada"
Roemer.2004$countryCode <- "CA"
Roemer.2004$basisOfRecord <- "HumanObservation"
# Concatenate 'fieldNumber' field from metadata
Roemer.2004$fieldNumber <- paste('Plot:', data.frame$plot, sep = " ")
# Concatenate 'occurrenceRemarks' field from metadata
Roemer.2004$occurrenceRemarks <- paste('Aspect (degrees):', data.frame$aspect.degrees, 'slope (percent):', data.frame$slope.percent,
'esimated (percent) coarse fragment:', data.frame$est.percent.coarse.fragment,
'estimated (percent) open soil / rock:', data.frame$percent.open.soil.or.rock,
'percent litter and dead wood:', data.frame$percent.litter.and.dead.wood, sep = " ")
# Drop / correct spurious reports
Roemer.2004 <- Roemer.2004 %>% filter(!str_detect(scientificName, 'Carex rostrata')) # Out of range on Galiano Island; misreported
Roemer.2004$scientificName[Roemer.2004$scientificName == 'Typha latifola'] <- 'Typha angustifolia' # Bullrush at Laughlin Lake has since been confirmed as Typha angustifolium
Roemer.2004$scientificName[Roemer.2004$scientificName == 'Epilobium watsonii'] <- 'Typha angustifolia' # Epilobium watsonii some recognize as infrascientificName of Epilobium ciliatum; collapsed with Epilobium ciliatum (report noted in curated summary)
# Merge with summary to standardize names and taxon metadata
Roemer.2004$scientificNameAuthorship <- summary$Taxon.Author[match(unlist(Roemer.2004$scientificName), summary$Taxon)]
Roemer.2004$taxonID <- summary$ID[match(unlist(Roemer.2004$scientificName), summary$Taxon)]
Roemer.2004$kingdom <- summary$Kingdom[match(unlist(Roemer.2004$scientificName), summary$Taxon)]
Roemer.2004$phylum <- summary$Phylum[match(unlist(Roemer.2004$scientificName), summary$Taxon)]
Roemer.2004$class <- summary$Class[match(unlist(Roemer.2004$scientificName), summary$Taxon)]
Roemer.2004$order <- summary$Order[match(unlist(Roemer.2004$scientificName), summary$Taxon)]
Roemer.2004$suborder <- summary$Suborder[match(unlist(Roemer.2004$scientificName), summary$Taxon)]
Roemer.2004$superfamily <- summary$Superfamily[match(unlist(Roemer.2004$scientificName), summary$Taxon)]
Roemer.2004$family <- summary$Family[match(unlist(Roemer.2004$scientificName), summary$Taxon)]
Roemer.2004$genus <- summary$Genus[match(unlist(Roemer.2004$scientificName), summary$Taxon)]
Roemer.2004$specificEpithet <- summary$Species[match(unlist(Roemer.2004$scientificName), summary$Taxon)]
Roemer.2004$hybrid <- summary$Hybrid[match(unlist(Roemer.2004$scientificName), summary$Taxon)]
Roemer.2004$subspecies <- summary$Subspecies[match(unlist(Roemer.2004$scientificName), summary$Taxon)]
Roemer.2004$variety <- summary$Variety[match(unlist(Roemer.2004$scientificName), summary$Taxon)]
Roemer.2004$establishmentMeans <- summary$Origin[match(unlist(Roemer.2004$scientificName), summary$Taxon)]
Roemer.2004$provincialStatus <- summary$Provincial.Status[match(unlist(Roemer.2004$scientificName), summary$Taxon)]
Roemer.2004$nationalStatus <- summary$National.Status[match(unlist(Roemer.2004$scientificName), summary$Taxon)]
# Unmatched records
Roemer.2004.names.unmatched <- Roemer.2004[is.na(Roemer.2004$taxonID),]
# Matched records
Roemer.2004.names.matched <- anti_join(Roemer.2004,Roemer.2004.names.unmatched)
# Confirm all records are represented
nrow(Roemer.2004)
nrow(Roemer.2004.names.matched)
nrow(Roemer.2004.names.unmatched)
nrow(Roemer.2004.names.matched)+nrow(Roemer.2004.names.unmatched)
# Read key to reconcile mismatches based on previous keys modified with the inclusion of new reports to summary
Roemer.2004.key <- read.csv("keys/vascular_plant_taxon_key_2022.csv")
# Swap unmatched names using key
Roemer.2004.names.unmatched.matched <- Roemer.2004.names.unmatched
Roemer.2004.names.unmatched.matched$scientificNameTemp <- Roemer.2004.key$Matched.Taxon[match(unlist(Roemer.2004.names.unmatched.matched$scientificName), Roemer.2004.key$Taxon)]
# Add values based on newly matched name
Roemer.2004.names.unmatched.matched$scientificNameAuthorship <- summary$Taxon.Author[match(unlist(Roemer.2004.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Roemer.2004.names.unmatched.matched$taxonID <- summary$ID[match(unlist(Roemer.2004.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Roemer.2004.names.unmatched.matched$kingdom <- summary$Kingdom[match(unlist(Roemer.2004.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Roemer.2004.names.unmatched.matched$phylum <- summary$Phylum[match(unlist(Roemer.2004.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Roemer.2004.names.unmatched.matched$class <- summary$Class[match(unlist(Roemer.2004.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Roemer.2004.names.unmatched.matched$order <- summary$Order[match(unlist(Roemer.2004.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Roemer.2004.names.unmatched.matched$suborder <- summary$Suborder[match(unlist(Roemer.2004.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Roemer.2004.names.unmatched.matched$superfamily <- summary$Superfamily[match(unlist(Roemer.2004.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Roemer.2004.names.unmatched.matched$family <- summary$Family[match(unlist(Roemer.2004.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Roemer.2004.names.unmatched.matched$genus <- summary$Genus[match(unlist(Roemer.2004.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Roemer.2004.names.unmatched.matched$specificEpithet <- summary$Species[match(unlist(Roemer.2004.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Roemer.2004.names.unmatched.matched$hybrid <- summary$Hybrid[match(unlist(Roemer.2004.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Roemer.2004.names.unmatched.matched$subspecies <- summary$Subspecies[match(unlist(Roemer.2004.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Roemer.2004.names.unmatched.matched$variety <- summary$Variety[match(unlist(Roemer.2004.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Roemer.2004.names.unmatched.matched$establishmentMeans <- summary$Origin[match(unlist(Roemer.2004.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Roemer.2004.names.unmatched.matched$provincialStatus <- summary$Provincial.Status[match(unlist(Roemer.2004.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Roemer.2004.names.unmatched.matched$nationalStatus <- summary$National.Status[match(unlist(Roemer.2004.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
# Filter taxa unrecognized in summary
Roemer.2004.names.unmatched.unmatched <- Roemer.2004.names.unmatched.matched[is.na(Roemer.2004.names.unmatched.matched$taxonID),]
Roemer.2004.names.unmatched.unmatched$scientificNameTemp <- NULL
# Filter taxa recognized in summary
Roemer.2004.names.unmatched.matched$scientificName <- Roemer.2004.names.unmatched.matched$scientificNameTemp
Roemer.2004.names.unmatched.matched$scientificNameTemp <- NULL
Roemer.2004.names.unmatched.matched <- Roemer.2004.names.unmatched.matched %>% drop_na(taxonID)
# Confirm all records are represented
nrow(Roemer.2004)
nrow(Roemer.2004.names.matched)
nrow(Roemer.2004.names.unmatched)
nrow(Roemer.2004.names.unmatched.matched)
nrow(Roemer.2004.names.unmatched.unmatched)
nrow(Roemer.2004.names.matched)+nrow(Roemer.2004.names.unmatched.matched)+nrow(Roemer.2004.names.unmatched.unmatched)
# Bind records
Roemer.2004.records <- rbind(Roemer.2004.names.matched,Roemer.2004.names.unmatched.matched)
# Set date formatting consistent with other data frames
Roemer.2004.records$eventDate <- as.Date(Roemer.2004.records$eventDate)
# Compare records in and out
nrow(Roemer.2004)
nrow(Roemer.2004.records)  # 0 records discarded
unmatched.vascular.plant.records <- rbind(unmatched.vascular.plant.records,Roemer.2004.names.unmatched.unmatched)
unmatched.vascular.plant.records
# Read Simon 2018 data
Simon.2018.transects <- read.csv("digitized/DarwinCore/Simon_2018_transect_coordinates_DwC.csv")
Simon.2018.veg.data <- read.csv("digitized/DarwinCore/Simon_2018_vegetation_data_DwC.csv")
# Add common name for transect ID to facilitate join
names(Simon.2018.transects) <- c('TID','Latitude','Longitude','Note')
# Merge transect coordinates with veg data
Simon.2018 <- inner_join(Simon.2018.veg.data, Simon.2018.transects, by = 'TID')
# Add 'fieldNumber' column
Simon.2018$fieldNumber <- Simon.2018$SID
# Remove rows with NAs
Simon.2018 <- Simon.2018 %>% drop_na(scientificName)
# Remove '_'s from Taxon field
Simon.2018$scientificName <-  str_replace(Simon.2018$scientificName, "_", " ")
# Correct misreported taxa
Simon.2018$scientificName[Simon.2018$scientificName == 'Torilis japonica'] <- 'Torilis arvensis' # Most of the Galiano Island material that I have examined more closely is T. arvensis, though T. japonica is also present
# Create unique identifiers for observations
unique.prefix <- "SIMON2021:"
unique.suffix <- 1:nrow(Simon.2018)
# Create DarwinCore dataframe template
data.frame <- as.data.frame(matrix(ncol = length(DwCFields), nrow = nrow(Simon.2018)))
names(data.frame) <- DwCFields
data.frame[names(Simon.2018)] <- Simon.2018
Simon.2018 <- select(data.frame, c(1:length(DwCFields)))
# Add metadata
Simon.2018$associatedReferences <- "Simon ADF, Marx HE, Starzomski BM (2021) Phylogenetic restriction of plant invasion in drought-stressed environments: Implications for insect-pollinated plant communities in water-limited ecosystems. Ecology and evolution 11: 10042-10053. https://doi.org/10.1002/ece3.7776"
Simon.2018$bibliographicCitation <- "Simon ADF, Marx HE, Starzomski BM (2021) Phylogenetic restriction of plant invasion in drought-stressed environments: Implications for insect-pollinated plant communities in water-limited ecosystems. Ecology and evolution 11: 10042-10053.https://doi.org/10.1002/ece3.7776"
Simon.2018$datasetName <- "Phylogenetic restriction of plant invasion in drought-stressed environments: Implications for insect-pollinated plant communities in water-limited ecosystems"
Simon.2018$catalogNumber <- paste(unique.prefix,unique.suffix, sep = "")
Simon.2018$recordedBy <- "Andrew Simon"
Simon.2018$coordinateUncertaintyInMeters <- 3
Simon.2018$georeferenceProtocol <- "Coordinates mapped by GPS"
Simon.2018$georeferenceVerificationStatus <- "verified by data contributor"
Simon.2018$stateProvince <- "British Columbia"
Simon.2018$island <- "Galiano Island"
Simon.2018$country <- "Canada"
Simon.2018$countryCode <- "CA"
Simon.2018$basisOfRecord <- "HumanObservation"
Simon.2018$samplingProtocol <- "Counts of flowering shoots as observed along 15 m belt transects (2 m wide), recorded at one meter intervals and summed by transect"
Simon.2018$occurrenceRemarks <- paste("Count:",data.frame$Count, sep = "")
# Merge with summary to standardize names and taxon metadata
Simon.2018$scientificNameAuthorship <- summary$Taxon.Author[match(unlist(Simon.2018$scientificName), summary$Taxon)]
Simon.2018$taxonID <- summary$ID[match(unlist(Simon.2018$scientificName), summary$Taxon)]
Simon.2018$kingdom <- summary$Kingdom[match(unlist(Simon.2018$scientificName), summary$Taxon)]
Simon.2018$phylum <- summary$Phylum[match(unlist(Simon.2018$scientificName), summary$Taxon)]
Simon.2018$class <- summary$Class[match(unlist(Simon.2018$scientificName), summary$Taxon)]
Simon.2018$order <- summary$Order[match(unlist(Simon.2018$scientificName), summary$Taxon)]
Simon.2018$suborder <- summary$Suborder[match(unlist(Simon.2018$scientificName), summary$Taxon)]
Simon.2018$superfamily <- summary$Superfamily[match(unlist(Simon.2018$scientificName), summary$Taxon)]
Simon.2018$family <- summary$Family[match(unlist(Simon.2018$scientificName), summary$Taxon)]
Simon.2018$genus <- summary$Genus[match(unlist(Simon.2018$scientificName), summary$Taxon)]
Simon.2018$specificEpithet <- summary$Species[match(unlist(Simon.2018$scientificName), summary$Taxon)]
Simon.2018$hybrid <- summary$Hybrid[match(unlist(Simon.2018$scientificName), summary$Taxon)]
Simon.2018$subspecies <- summary$Subspecies[match(unlist(Simon.2018$scientificName), summary$Taxon)]
Simon.2018$variety <- summary$Variety[match(unlist(Simon.2018$scientificName), summary$Taxon)]
Simon.2018$establishmentMeans <- summary$Origin[match(unlist(Simon.2018$scientificName), summary$Taxon)]
Simon.2018$provincialStatus <- summary$Provincial.Status[match(unlist(Simon.2018$scientificName), summary$Taxon)]
Simon.2018$nationalStatus <- summary$National.Status[match(unlist(Simon.2018$scientificName), summary$Taxon)]
# Unmatched records
Simon.2018.names.unmatched <- Simon.2018[is.na(Simon.2018$taxonID),]
# Matched records
Simon.2018.names.matched <- anti_join(Simon.2018,Simon.2018.names.unmatched)
# Confirm all records are represented
nrow(Simon.2018)
nrow(Simon.2018.names.matched)
nrow(Simon.2018.names.unmatched)
nrow(Simon.2018.names.matched)+nrow(Simon.2018.names.unmatched)
# Read key to reconcile mismatches based on previous keys modified with the inclusion of new reports to summary
Simon.2018.key <- read.csv("keys/vascular_plant_taxon_key_2022.csv")
# Swap unmatched names using key
Simon.2018.names.unmatched.matched <- Simon.2018.names.unmatched
Simon.2018.names.unmatched.matched$scientificNameTemp <- Simon.2018.key$Matched.Taxon[match(unlist(Simon.2018.names.unmatched.matched$scientificName), Simon.2018.key$Taxon)]
# Add values based on newly matched name
Simon.2018.names.unmatched.matched$scientificNameAuthorship <- summary$Taxon.Author[match(unlist(Simon.2018.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Simon.2018.names.unmatched.matched$taxonID <- summary$ID[match(unlist(Simon.2018.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Simon.2018.names.unmatched.matched$kingdom <- summary$Kingdom[match(unlist(Simon.2018.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Simon.2018.names.unmatched.matched$phylum <- summary$Phylum[match(unlist(Simon.2018.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Simon.2018.names.unmatched.matched$class <- summary$Class[match(unlist(Simon.2018.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Simon.2018.names.unmatched.matched$order <- summary$Order[match(unlist(Simon.2018.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Simon.2018.names.unmatched.matched$suborder <- summary$Suborder[match(unlist(Simon.2018.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Simon.2018.names.unmatched.matched$superfamily <- summary$Superfamily[match(unlist(Simon.2018.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Simon.2018.names.unmatched.matched$family <- summary$Family[match(unlist(Simon.2018.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Simon.2018.names.unmatched.matched$genus <- summary$Genus[match(unlist(Simon.2018.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Simon.2018.names.unmatched.matched$specificEpithet <- summary$Species[match(unlist(Simon.2018.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Simon.2018.names.unmatched.matched$hybrid <- summary$Hybrid[match(unlist(Simon.2018.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Simon.2018.names.unmatched.matched$subspecies <- summary$Subspecies[match(unlist(Simon.2018.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Simon.2018.names.unmatched.matched$variety <- summary$Variety[match(unlist(Simon.2018.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Simon.2018.names.unmatched.matched$establishmentMeans <- summary$Origin[match(unlist(Simon.2018.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Simon.2018.names.unmatched.matched$provincialStatus <- summary$Provincial.Status[match(unlist(Simon.2018.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
Simon.2018.names.unmatched.matched$nationalStatus <- summary$National.Status[match(unlist(Simon.2018.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
# Filter taxa unrecognized in summary
Simon.2018.names.unmatched.unmatched <- Simon.2018.names.unmatched.matched[is.na(Simon.2018.names.unmatched.matched$taxonID),]
Simon.2018.names.unmatched.unmatched$scientificNameTemp <- NULL
# Filter taxa recognized in summary
Simon.2018.names.unmatched.matched$scientificName <- Simon.2018.names.unmatched.matched$scientificNameTemp
Simon.2018.names.unmatched.matched$scientificNameTemp <- NULL
Simon.2018.names.unmatched.matched <- Simon.2018.names.unmatched.matched %>% drop_na(taxonID)
# Confirm all records are represented
nrow(Simon.2018)
nrow(Simon.2018.names.matched)
nrow(Simon.2018.names.unmatched)
nrow(Simon.2018.names.unmatched.matched)
nrow(Simon.2018.names.unmatched.unmatched)
nrow(Simon.2018.names.matched)+nrow(Simon.2018.names.unmatched.matched)+nrow(Simon.2018.names.unmatched.unmatched)
# Bind records
Simon.2018.records <- rbind(Simon.2018.names.matched,Simon.2018.names.unmatched.matched)
# Set date formatting consistent with other data frames
Simon.2018.records$eventDate <- as.Date(Simon.2018.records$eventDate)
# Compare records in and out
nrow(Simon.2018)
nrow(Simon.2018.records) # 92 records discarded: all domesticated / cultivated plants
unmatched.vascular.plant.records <- rbind(unmatched.vascular.plant.records,Simon.2018.names.unmatched.unmatched)
unmatched.vascular.plant.records
# Read UBC specimen records (UBC 2022)
UBC.2022 <- read.csv("digitized/DarwinCore/UBC_Galiano_Island_vascular_plants_2022-10-31_DwC.csv")
# Change date format to POSIX
UBC.2022$eventDate <- strptime(UBC.2022$eventDate, "%Y %b %d")
UBC.2022$eventDate <-  as.Date(UBC.2022$eventDate)
# Create DarwinCore dataframe template
data.frame <- as.data.frame(matrix(ncol = length(DwCFields), nrow = nrow(UBC.2022)))
names(data.frame) <- DwCFields
data.frame[names(UBC.2022)] <- UBC.2022
UBC.2022 <- select(data.frame, c(1:length(DwCFields)))
# Add metadata
UBC.2022$stateProvince <- "British Columbia"
UBC.2022$island <- "Galiano Island"
UBC.2022$countryCode <- "CA"
UBC.2022$basisOfRecord <- "PreservedSpecimen"
UBC.2022$institutionCode <- "UBC"
# Merge with summary to standardize names and taxon metadata
UBC.2022$scientificNameAuthorship <- summary$Taxon.Author[match(unlist(UBC.2022$scientificName), summary$Taxon)]
UBC.2022$taxonID <- summary$ID[match(unlist(UBC.2022$scientificName), summary$Taxon)]
UBC.2022$kingdom <- summary$Kingdom[match(unlist(UBC.2022$scientificName), summary$Taxon)]
UBC.2022$phylum <- summary$Phylum[match(unlist(UBC.2022$scientificName), summary$Taxon)]
UBC.2022$class <- summary$Class[match(unlist(UBC.2022$scientificName), summary$Taxon)]
UBC.2022$order <- summary$Order[match(unlist(UBC.2022$scientificName), summary$Taxon)]
UBC.2022$suborder <- summary$Suborder[match(unlist(UBC.2022$scientificName), summary$Taxon)]
UBC.2022$superfamily <- summary$Superfamily[match(unlist(UBC.2022$scientificName), summary$Taxon)]
UBC.2022$family <- summary$Family[match(unlist(UBC.2022$scientificName), summary$Taxon)]
UBC.2022$genus <- summary$Genus[match(unlist(UBC.2022$scientificName), summary$Taxon)]
UBC.2022$specificEpithet <- summary$Species[match(unlist(UBC.2022$scientificName), summary$Taxon)]
UBC.2022$hybrid <- summary$Hybrid[match(unlist(UBC.2022$scientificName), summary$Taxon)]
UBC.2022$subspecies <- summary$Subspecies[match(unlist(UBC.2022$scientificName), summary$Taxon)]
UBC.2022$variety <- summary$Variety[match(unlist(UBC.2022$scientificName), summary$Taxon)]
UBC.2022$establishmentMeans <- summary$Origin[match(unlist(UBC.2022$scientificName), summary$Taxon)]
UBC.2022$provincialStatus <- summary$Provincial.Status[match(unlist(UBC.2022$scientificName), summary$Taxon)]
UBC.2022$nationalStatus <- summary$National.Status[match(unlist(UBC.2022$scientificName), summary$Taxon)]
# Unmatched records
UBC.2022.names.unmatched <- UBC.2022[is.na(UBC.2022$taxonID),]
# Matched records
UBC.2022.names.matched <- anti_join(UBC.2022,UBC.2022.names.unmatched)
# Confirm all records are represented
nrow(UBC.2022)
nrow(UBC.2022.names.matched)
nrow(UBC.2022.names.unmatched)
nrow(UBC.2022.names.matched)+nrow(UBC.2022.names.unmatched)
# Read key to reconcile mismatches based on previous keys modified with the inclusion of new reports to summary
UBC.2022.key <- read.csv("keys/vascular_plant_taxon_key_2022.csv")
# Swap unmatched names using key
UBC.2022.names.unmatched.matched <- UBC.2022.names.unmatched
UBC.2022.names.unmatched.matched$scientificNameTemp <- UBC.2022.key$Matched.Taxon[match(unlist(UBC.2022.names.unmatched.matched$scientificName), UBC.2022.key$Taxon)]
# Add values based on newly matched name
UBC.2022.names.unmatched.matched$scientificNameAuthorship <- summary$Taxon.Author[match(unlist(UBC.2022.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
UBC.2022.names.unmatched.matched$taxonID <- summary$ID[match(unlist(UBC.2022.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
UBC.2022.names.unmatched.matched$kingdom <- summary$Kingdom[match(unlist(UBC.2022.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
UBC.2022.names.unmatched.matched$phylum <- summary$Phylum[match(unlist(UBC.2022.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
UBC.2022.names.unmatched.matched$class <- summary$Class[match(unlist(UBC.2022.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
UBC.2022.names.unmatched.matched$order <- summary$Order[match(unlist(UBC.2022.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
UBC.2022.names.unmatched.matched$suborder <- summary$Suborder[match(unlist(UBC.2022.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
UBC.2022.names.unmatched.matched$superfamily <- summary$Superfamily[match(unlist(UBC.2022.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
UBC.2022.names.unmatched.matched$family <- summary$Family[match(unlist(UBC.2022.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
UBC.2022.names.unmatched.matched$genus <- summary$Genus[match(unlist(UBC.2022.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
UBC.2022.names.unmatched.matched$specificEpithet <- summary$Species[match(unlist(UBC.2022.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
UBC.2022.names.unmatched.matched$hybrid <- summary$Hybrid[match(unlist(UBC.2022.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
UBC.2022.names.unmatched.matched$subspecies <- summary$Subspecies[match(unlist(UBC.2022.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
UBC.2022.names.unmatched.matched$variety <- summary$Variety[match(unlist(UBC.2022.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
UBC.2022.names.unmatched.matched$establishmentMeans <- summary$Origin[match(unlist(UBC.2022.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
UBC.2022.names.unmatched.matched$provincialStatus <- summary$Provincial.Status[match(unlist(UBC.2022.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
UBC.2022.names.unmatched.matched$nationalStatus <- summary$National.Status[match(unlist(UBC.2022.names.unmatched.matched$scientificNameTemp), summary$Taxon)]
# Filter taxa unrecognized in summary
UBC.2022.names.unmatched.unmatched <- UBC.2022.names.unmatched.matched[is.na(UBC.2022.names.unmatched.matched$taxonID),]
UBC.2022.names.unmatched.unmatched$scientificNameTemp <- NULL
# Filter taxa recognized in summary
UBC.2022.names.unmatched.matched$scientificName <- UBC.2022.names.unmatched.matched$scientificNameTemp
UBC.2022.names.unmatched.matched$scientificNameTemp <- NULL
UBC.2022.names.unmatched.matched <- UBC.2022.names.unmatched.matched %>% drop_na(taxonID)
# Confirm all records are represented
nrow(UBC.2022)
nrow(UBC.2022.names.matched)
nrow(UBC.2022.names.unmatched)
nrow(UBC.2022.names.unmatched.matched)
nrow(UBC.2022.names.unmatched.unmatched)
nrow(UBC.2022.names.matched)+nrow(UBC.2022.names.unmatched.matched)+nrow(UBC.2022.names.unmatched.unmatched)
# Bind records
UBC.2022.records <- rbind(UBC.2022.names.matched,UBC.2022.names.unmatched.matched)
# Set date formatting consistent with other data frames
UBC.2022.records$eventDate <- as.Date(UBC.2022.records$eventDate)
# Compare records in and out
nrow(UBC.2022)
nrow(UBC.2022.records) # All accounted for
unmatched.vascular.plant.records <- rbind(unmatched.vascular.plant.records,UBC.2022.names.unmatched.unmatched)
unmatched.vascular.plant.records
# Combine all source occurrence records
Vascular.plant.records <- rbind(BC.CDC.2019.records,DL63.records,Ecological.Reserve.128.records,Hunterston.2010.records,iNaturalist.records,
Janszen.2003.records,Laughlin.2002.records,Roemer.2004.records,RBCM.records,Simon.2018.records,Lomer.2022.records,
Lomer.2022.Gossip.Is.records,UBC.2022.records)
# Finalize DwC fields (day, month, year, infraspecificEpithet, occurrenceStatus)
# Date
Vascular.plant.records$year <- substr(Vascular.plant.records$eventDate, 1, 4)
Vascular.plant.records$month <- substr(Vascular.plant.records$eventDate, 6, 7)
Vascular.plant.records$day <- substr(Vascular.plant.records$eventDate, 9, 10)
# Infrataxa
Genera <- Vascular.plant.records %>% filter(specificEpithet == "")
Genera <- Genera %>% filter(hybrid == "")
Genera$taxonRank <- "genus"
Genera <- subset(Genera, select = -c(hybrid, subspecies, variety, form))
Species <- subset(Vascular.plant.records, specificEpithet != "")
Species <- Species %>% filter(hybrid == "")
Species <- Species %>% filter(variety == "")
Species <- Species %>% filter(subspecies == "")
Species$taxonRank <- "species"
Species <- subset(Species, select = -c(hybrid, subspecies, variety, form))
Hybrids <- subset(Vascular.plant.records, hybrid != "")
Hybrids$taxonRank <- "hybrid"
Hybrids$infraspecificEpithet <- Hybrids$hybrid
Hybrids <- subset(Hybrids, select = -c(hybrid, subspecies, variety, form))
Subspecies <- subset(Vascular.plant.records, subspecies != "")
Subspecies$taxonRank <- "subspecies"
Subspecies$infraspecificEpithet <- Subspecies$subspecies
Subspecies <- subset(Subspecies, select = -c(hybrid, subspecies, variety, form))
Varieties <- subset(Vascular.plant.records, variety != "")
Varieties$taxonRank <- "varietas"
Varieties$infraspecificEpithet <- Varieties$variety
Varieties <- subset(Varieties, select = -c(hybrid, subspecies, variety, form))
Vascular.plant.records <- rbind(Genera, Species, Hybrids, Subspecies, Varieties)
# occurrenceStatus
Vascular.plant.records$occurrenceStatus <- "present"
# Order by taxon
Vascular.plant.records <- Vascular.plant.records[order(Vascular.plant.records$scientificName),]
head(Vascular.plant.records)
# Tally records
nrow(Vascular.plant.records)
# Summary of records that remain unmatched
nrow(unmatched.vascular.plant.records)
sort(unique(unmatched.vascular.plant.records$scientificName))
# Remove NAs
Vascular.plant.records[is.na(Vascular.plant.records)] <- ""
# Output synthesized catalog of occurrence records
write.csv(Vascular.plant.records,"synthesized/Galiano_Island_vascular_plant_records_consolidated.csv", row.names = FALSE)
View(Vascular.plant.records)
